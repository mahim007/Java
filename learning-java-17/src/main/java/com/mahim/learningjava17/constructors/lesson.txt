Constructors
------------
-- once we create and object compulsory we perform initialization, then only the object is in a position to respond
    properly.
-- whenever we are creating an object some piece of the code will be executed automatically to perform initialization of
    the object. this piece of the code is noting but constructor. Hence, the main purpose of constructor is to perform
    initialization of an object, but not to create object.

difference between constructor and instance block
-------------------------------------------------
-- other than initialization if we want to perform any activity for every object creation then we should go for instance
    block (like updating one entry in the database for every object creation or incrementing count value for every
    object creation)
-- both constructor and instance block have their own different purposes and replacing one concept with another concept
    may not work always.
-- both constructor and instance block will be executed for every object creation, but instance block first followed by
    constructor.
-- demo program to print a number of objects created for a class. -> CountDemo.java

Constructor properties
----------------------
-- name of the class and name of the constructor must be matched.
-- return type concept not applicable for constructor even void also.
-- by mistake if we are trying to declare return type for the constructor then we won't get any compile time error,
    because compiler treats it as a method. -> NotConstructor.java
    it's valid to have a method whose name is same as class name, but it's not a good practice.
-- the only applicable modifiers for constructors are public, private, protected, default. if we are trying to use
    any other modifier we will get compile time error.
-- default constructor: compiler is responsible for generating default constructor. (if we are not writing any constructor)
-- every java class contains constructor, it may be default constructor provided by compiler, or explicit constructor
    provided by programmer, but not both simultaneously.

Prototype of default constructor
--------------------------------
1. always no-arg constructor.
2. access modifier of default constructor is same as class modifier. (this rule is applicable only for public and default)
3. it contains only one line: super(); -> no argument call to super class constructor.
4. in properly written constructor the first line should be either super(); or this(); otherwise compiler will write
    super(); for us.

case 1: call to super(); or this() must be first statement in constructors. otherwise, we will get compile time error
    saying: call to super must be first statement in constructor
case 2: super() and this() can not be used simultaneously.
case 3: we can use super() or this() only inside a constructor but not inside any other method. that is we can call a
    constructor directly from another constructor only.

super(), this() VS super, this
------------------------------
super(), this()
    1. these are constructors calls to super and current class constructors.
    2. they can be used only in constructors as a first line.
    3. we can use only one of them in a constructor.

super, this
    1. these are keywords to refer super class and current class instance members.
    2. we can use them anywhere except static area.
    3. we can use them any number of time.


for constructors inheritance and overriding concept are not applicable. but overloading concept is applicable.
every class in java including abstract class can contain constructor, but interface can not contain constructor.

Some use-cases regarding constructors in java
---------------------------------------------
Case 1:
    recursive method call is a RuntimeException saying: StackOverflowError
    but in our program if there is chance of recursive constructor invocation then the code won't compile, and we will
    get CompileTimeError. example: RecursiveConstructor.java

Case 2: (Test.java)
        Note:
        1. If parent class contains any argument constructor then while writing child classes we have to take special
            care with respect to constructors.
        2. Whenever we are writing any arguments' constructor, it's highly recommended writing no-arg constructor also.
            see Test1.java

Case 3:
    Whenever parent class constructor throws any checked exception, compulsory child class constructor should throw the
    same checked exception or it's parent, otherwise the program won't compile. see Test1.java

Which of the following statement is valid?
1. the main purpose of constructor is to create an object. -> invalid
2. the main purpose of constructor is to perform initialization of an object. -> valid
3. the name of the constructor need not be same as class name. - invalid
4. return type concept applicable for constructors, but only void. -> invalid
5. we can apply any modifier for constructor. -> invalid (only public, private, protected, default are applicable)
    (final, static, strictFOP not applicable)
6. default constructor generated by JVM. -> invalid (compiler is responsible for generating default constructor)
7. compiler is responsible for generating default constructor. -> valid
8. compiler will always generate default constructor. -> invalid (if out class doesn't contain any constructor then only
    compiler will generate default constructor.)
9. if we are not writing no-arg constructor then compiler will generate default constructor. -> invalid
10. every no-arg constructor is always default constructor. -> invalid
11. default constructor is always no-arg constructor. -> valid
12. the first line inside every constructor should be either super() or this(). if we are not writing anything then
    compiler will generate this(). -> invalid (compiler will always place super())
13. for constructors both overloading and overriding concepts are applicable -> invalid (only overloading applicable)
14. for constructors inheritance concept applicable but not overriding. -> invalid
15. only concrete classes can contain constructors but abstract classes can not. -> invalid (abstract classes can also
    contain constructor)
16. interface can contain constructor. -> invalid
17. recursive constructor invocation is a runtime exception. -> invalid (it's a compile-time error)
18. if parent class constructor throws some checked exception, then compulsary child class cconstructor should throw
    the same checked exception or it's child. -> invalid (the same checked exception or it's parent)
